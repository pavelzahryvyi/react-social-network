{"version":3,"sources":["components/Navbar/Navbar.module.css","img/logo.png","components/Profile/MyPosts/MyPosts.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Header/Header.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/Message/Message.module.css","components/News/News.module.css","components/Settings/Settings.module.css","serviceWorker.js","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","App.js","redux/state.js","render.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","styles","header","src","logo","Navbar","style","nav","item","to","activeClassName","active","Post","props","alt","message","likes","MyPosts","postElements","postData","map","post","likesCount","newPostElement","React","createRef","postsBlock","newPostBlock","onChange","text","current","value","console","log","updateNewPostText","ref","newPostText","onClick","addPost","allPostsBlock","ProfileInfo","descriptionBlock","Profile","ProfileContent","Message","DialogItem","path","id","dialog","name","Dialogs","dialogData","messagesData","dialogsElements","messagesElements","messageItem","linkTextareaMessages","dialogs","dialogsBlock","messagesBlock","alert","News","Music","Settings","App","render","state","profilePage","dialogsPage","component","siteBar","newPost","push","rerenderEntireTree","newtext","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63ee05b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2z6qM\",\"item\":\"Navbar_item__1M2r1\",\"active\":\"Navbar_active__1Cvlk\"};","module.exports = __webpack_public_path__ + \"static/media/logo.b970052f.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2GYzi\",\"newPostBlock\":\"MyPosts_newPostBlock__23WbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Z_vz\",\"dialogsBlock\":\"Dialogs_dialogsBlock__3Rzxf\",\"messagesBlock\":\"Dialogs_messagesBlock__1IRJT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"DialogItem_active__oFyRn\",\"dialog\":\"DialogItem_dialog__27tK4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2XvnI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileContent\":\"Profile_ProfileContent__3F7pk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__uylRa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3J8Gf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1qpfU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"News_nav__2kotm\",\"item\":\"News_item__3UaYa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Settings_nav__AcH-0\",\"item\":\"Settings_item__29ZzC\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport logo from \"../../img/logo.png\";\r\nimport styles from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <img src={logo}/>\r\n            <h1>Welcome</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport logo from \"../../img/logo.png\";\r\nimport style from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={style.nav}>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/profile\" activeClassName={style.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={style.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/news\" activeClassName={style.active}>News</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to=\"/music\" activeClassName={style.active}>Music</NavLink>\r\n            </div>\r\n            <div className={style.item} >\r\n                <NavLink to=\"/settings\" activeClassName={style.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport style from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src=\"https://static.turbosquid.com/Preview/2019/02/12__04_46_30/cirlce_43.jpgF75B8343-6B7D-4C48-9F15-26C555FCB2DDZoom.jpg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like {props.likes}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport style from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    //console.log(\"---MyPosts props \", props);\r\n\r\n    let postData = props.postData;\r\n\r\n    let postElements = postData.map(post => <Post message = {post.message} likes = {post.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let addPost = () => {\r\n        props.addPost(); // call BLL func to adding data to state and rerendering UI\r\n    };\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        console.log(text);\r\n        props.updateNewPostText(text);\r\n    };\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <div className={style.newPostBlock}>\r\n                <h3>New post</h3>\r\n                <p>Welcome to the updated app! You can add a new post now</p>\r\n                <p>\r\n                    Click \"Add post\" button or write your text and click the button to add a new post\r\n                    <span> *CSS will be soon</span> ;)\r\n                </p>\r\n                <div>\r\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={ addPost }>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={style.allPostsBlock}>\r\n                <h3>My posts</h3>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport style from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <div className=\"profileInfo\">\r\n            <div>\r\n                <img\r\n                    src=\"https://image.winudf.com/v2/image/Y29tLmJlYWNoLmJhbGliZWFjaHdhbGxwYXBlcl9zY3JlZW5fMF8xNTMyOTc5NTE3XzA0NQ/screen-0.jpg?fakeurl=1&type=.jpg\"\r\n                    alt=\"\"/>\r\n            </div>\r\n            <div className={style.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport styles from \"./Profile.module.css\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    console.log('---props in Profile ', props);\r\n\r\n\r\n    return (\r\n        <div className={styles.ProfileContent}>\r\n            <ProfileInfo/>\r\n            <MyPosts\r\n                postData = {props.postData}\r\n                addPost = {props.addPost}\r\n                newPostText = {props.newPostText}\r\n                updateNewPostText = {props.updateNewPostText}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport styles from './Message.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={styles.message}>{props.message}</div>\r\n    )\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from './DialogItem.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    console.log('--- DialogItem props ', props);\r\n\r\n    let path = `/dialogs/${props.id}`;\r\n    return (\r\n        <div className={styles.dialog}>\r\n            <NavLink activeClassName={styles.active} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport styles from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    console.log('--- Dialogs props ', props);\r\n\r\n    let dialogData = props.dialogData;\r\n    let messagesData = props.messagesData;\r\n\r\n    //array of components\r\n    let dialogsElements = dialogData.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>);\r\n\r\n    let messagesElements = messagesData.map(messageItem => <Message message={messageItem.message} />);\r\n\r\n    let linkTextareaMessages = React.createRef();\r\n    let buttonEvent = () => {\r\n        let text = linkTextareaMessages.current.value;\r\n        alert(text);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsBlock}>\r\n\r\n                { dialogsElements }\r\n\r\n            </div>\r\n            <div className={styles.messagesBlock}>\r\n\r\n                { messagesElements }\r\n\r\n                <textarea ref={ linkTextareaMessages }></textarea>\r\n                <button onClick={ buttonEvent }>Add</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport logo from \"../../img/logo.png\";\r\nimport classes from \"./News.module.css\";\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default News;","import React from \"react\";\r\nimport styles from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Music;","import React from \"react\";\r\nimport logo from \"../../img/logo.png\";\r\nimport styles from \"./Settings.module.css\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;","import React from 'react';\nimport {BrowserRouter, HashRouter, Route} from \"react-router-dom\";\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\n\nfunction App(props) {\n\n    console.log('--- App props ', props);\n\n\n    let ProfileComponent = () => <Profile\n        postData={props.state.profilePage.postData}\n        addPost={props.addPost}\n        newPostText = {props.state.profilePage.newPostText}\n        updateNewPostText = {props.updateNewPostText}/>;\n    let DialogsComponent = () => <Dialogs\n        dialogData={props.state.dialogsPage.dialogData}\n        messagesData={props.state.dialogsPage.messagesData}/>;\n\n    return (\n        <HashRouter>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    {/*<Route path='/profile' component={Profile}/>\n                    <Route path='/dialogs' component={Dialogs}/>*/}\n                    <Route path='/profile' render={ProfileComponent}/>\n                    <Route path='/dialogs' render={DialogsComponent}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                </div>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import {rerenderEntireTree} from \"../render\";\r\n\r\nlet state = {\r\n\r\n    profilePage: {\r\n        postData: [\r\n            {id:2, message: 'My first react app!', likesCount: 32},\r\n            {id:3, message: 'I need more CSS', likesCount: 15},\r\n            {id:3, message: 'COOOOOOOOOOOOOOL!!!', likesCount: 15},\r\n            {id:4, message: 'React is cool!', likesCount: 45},\r\n        ],\r\n        newPostText: 'Welcome! Have a nice day!',\r\n    },\r\n\r\n    dialogsPage: {\r\n        dialogData: [\r\n            {id: 1, name: 'Pavel'},\r\n            {id: 2, name: 'Andrey'},\r\n            {id: 3, name: 'Egor'},\r\n            {id: 4, name: 'Sasha'},\r\n        ],\r\n\r\n        messagesData: [\r\n            {id: 1, message: 'Yo!'},\r\n            {id: 2, message: 'How are you?'},\r\n            {id: 3, message: 'What are you doing?'},\r\n            {id: 4, message: 'Hi!'},\r\n        ]\r\n    },\r\n\r\n    siteBar: {}\r\n\r\n\r\n};\r\n\r\nexport let addPost = () => {\r\n    let text = state.profilePage.newPostText;\r\n    let newPost = {\r\n        id:5,\r\n        message: text,\r\n        likesCount: 0\r\n    };\r\n\r\n    if(text !== '') {\r\n        state.profilePage.postData.push(newPost);\r\n        state.profilePage.newPostText = '';\r\n        rerenderEntireTree(state);\r\n    }\r\n};\r\n\r\nexport let updateNewPostText = newtext => {\r\n    state.profilePage.newPostText = newtext;\r\n    rerenderEntireTree(state);\r\n};\r\n\r\nexport default state;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {addPost, updateNewPostText} from \"./redux/state\";\n\nexport let rerenderEntireTree = (state) => {\n    ReactDOM.render(<App\n        state = { state }\n        addPost = { addPost }\n        updateNewPostText = { updateNewPostText }\n    />, document.getElementById('root'));\n};","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {rerenderEntireTree} from \"./render\";\nimport state from \"./redux/state\";\n\nrerenderEntireTree(state);\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}